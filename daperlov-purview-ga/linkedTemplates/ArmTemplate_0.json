{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "daperlov-purview-ga"
		},
		"DataLake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DataLake'"
		},
		"Enhydra_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Enhydra'"
		},
		"Phocoenoides_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Phocoenoides'"
		},
		"Zalophus_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Zalophus'"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://bug-bash-kv.vault.azure.net/"
		},
		"DataLake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://daperlovpurviewadls.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DataLake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DataLake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericRaw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ServingLayer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "noaa/aggregated-data",
						"fileSystem": "serving"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Enhydra')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Enhydra_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-enhydra-lutris"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Phocoenoides')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('Phocoenoides_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "postgres-phocoenoides",
						"secretVersion": ""
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Zalophus')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureMySql",
				"typeProperties": {
					"connectionString": "[parameters('Zalophus_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "MySQL-zalophus"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericPostGres')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Phocoenoides",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Phocoenoides')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessNOAA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "NOAA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ServingLayer",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AggregateTotals"
						}
					],
					"script": "source(output(\n\t\tpermit_id as integer,\n\t\tyear_issue as integer,\n\t\tname as string,\n\t\thull_id as string,\n\t\towner_name as string,\n\t\towner_phone as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tzip as string,\n\t\thome_port as string,\n\t\thome_port_st as string,\n\t\tvessel_lgth as double,\n\t\tvessel_wt_tons as double,\n\t\thorsepower as integer,\n\t\tmax_limit as string,\n\t\tbluefish as string,\n\t\tblack_seabass as string,\n\t\tspiny_dogfish as string,\n\t\tsummer_flounder as string,\n\t\therring as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'raw',\n\tfolderPath: 'phocoenoides/noaa_permits_2019',\n\tfileName: 'data_b8e6e235-a3ea-469f-923c-a89f4ff1e9ed_b694cb6a-2a0c-439a-8e9c-f1c2a726605a.parquet') ~> NOAA\nNOAA aggregate(groupBy(year_issue,\n\t\tstate),\n\tbluefish = sum(toInteger(bluefish)),\n\t\tblack_seabass = sum(toInteger(black_seabass)),\n\t\tspiny_dogfish = sum(toInteger(spiny_dogfish)),\n\t\tsummer_flounder = sum(toInteger(summer_flounder))) ~> AggregateTotals\nAggregateTotals sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]",
				"[concat(variables('factoryId'), '/datasets/ServingLayer')]"
			]
		}
	]
}